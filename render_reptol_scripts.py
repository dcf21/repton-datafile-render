#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# render_reptol_scripts.py
#
# This Python script produces listings of Blueprint files (T or eT files)
# generated by the Electron and BBC Micro versions of Repton Infinity
# (Superior Software 1988). The language used by Repton Infinity was called
# Reptol.
#
# Copyright (C) 2023 Dominic Ford <https://dcford.org.uk/>
#
# This code is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# You should have received a copy of the GNU General Public License along with
# this file; if not, write to the Free Software Foundation, Inc., 51 Franklin
# Street, Fifth Floor, Boston, MA  02110-1301, USA

# ----------------------------------------------------------------------------

"""
Produce listings of Blueprint files (T or eT files) generated by the Electron
and BBC Micro versions of Repton Infinity (Superior Software 1988). The language
used by Repton Infinity was called Reptol.

References:

https://www.reptonresourcepage.co.uk/Downloads/Items/DecodingRepton.pdf
"""

import argparse
import logging
import sys

reptol_tokens = {
    0x80: "NAME",
    0x81: "HITBY",
    0x82: "LOOK(",
    0x83: "DEFINE",
    0x84: "CREATE(",
    0x85: "IF",
    0x86: "MOVING",
    0x87: "ELSE",
    0x88: "ENDIF",
    0x89: "GOTO",
    0x8A: "NOT",
    0x8B: "KILLREPTON",
    0x8C: "CHANGE(",
    0x8D: "END",
    0x8E: "SCORE(",
    0x8F: "SOUND(",
    0x90: "FLIP",
    0x91: "EFFECT(",
    0x92: "FLASH(",
    0x93: "CHANCE(",
    0x94: "KEY",
    0x95: "One",
    0x96: "Two",
    0x97: "Four",
    0x98: "TYPE",
    0x99: "ACTION",
    0x9A: "HITS",
    0x9B: "MOVE(",
    0x9C: "STATE(",
    0x9D: "LABEL",
    0x9E: "EVENT(",
    0x9F: "CONTENTS",
    0xA0: "Animate",
    0xA1: "RED",
    0xA2: "GREEN",
    0xA3: "YELLOW",
    0xA4: "BLUE",
    0xA5: "MAGENTA",
    0xA6: "CYAN",
    0xA7: "WHITE",
    0xA8: "WESTOF",
    0xA9: "SOUTHOF",
    0xAA: "EASTOF",
    0xAB: "NORTHOF"
}


def create_reptol_listing_from_file(filename: str) -> str:
    """
    Produce listings of Blueprint files (T or eT files) generated by Repton Infinity.

    :param filename:
        The filename of the binary T or eT input file
    :return:
        string
    """

    # Read Repton Blueprint file
    with open(filename, "rb") as f:
        blueprint_bytes = f.read()

    # Produce listing
    sprite_number: int = 0
    output: str = "\nSprite {:d}\n  ".format(sprite_number)

    pos: int = 0x10

    while pos < len(blueprint_bytes):
        val = blueprint_bytes[pos]
        pos += 1

        if val in reptol_tokens:
            output += reptol_tokens[val]
        elif val == 0xFE:
            sprite_number += 1
            output += "\nSprite {:d}\n  ".format(sprite_number)
        elif val == 0x0D:
            output += "\n  "
        elif val > 0xC8:
            output += " " * (val - 0xC8)
        elif 0x20 <= val <= 0x7F:
            output += chr(val)

    # Return listing
    return output


# Do it right away if we're run as a script
if __name__ == "__main__":
    # Set up a logging object
    logging.basicConfig(level=logging.INFO,
                        stream=sys.stdout,
                        format='[%(asctime)s] %(levelname)s:%(filename)s:%(message)s',
                        datefmt='%d/%m/%Y %H:%M:%S')
    logger = logging.getLogger(__name__)
    logger.debug(__doc__.strip())

    # Read input parameters
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--input',
                        default="/mnt/ganymede4/dcf21/floppy_disks/elk_floppies_v4_unzipped/elk06/repinf/REPINFIN/eT/Rep3",
                        type=str,
                        dest="input",
                        help="The filename of the binary T or eT input file")
    args = parser.parse_args()

    # Create listing of Repton Blueprint file
    blueprint_listing = create_reptol_listing_from_file(filename=args.input)

    # Output listing of Repton Blueprint file to stdout
    print(blueprint_listing)
